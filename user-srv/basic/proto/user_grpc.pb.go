// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.11
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_Register_FullMethodName        = "/proto.User/Register"
	User_OrderItemadd_FullMethodName    = "/proto.User/OrderItemadd"
	User_OrderItemUpdate_FullMethodName = "/proto.User/OrderItemUpdate"
	User_OrderItemLike_FullMethodName   = "/proto.User/OrderItemLike"
	User_Shopadd_FullMethodName         = "/proto.User/Shopadd"
	User_Recordadd_FullMethodName       = "/proto.User/Recordadd"
	User_ShopList_FullMethodName        = "/proto.User/ShopList"
	User_OrderItemShow_FullMethodName   = "/proto.User/OrderItemShow"
	User_OrderItemList_FullMethodName   = "/proto.User/OrderItemList"
	User_OrderItemdel_FullMethodName    = "/proto.User/OrderItemdel"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	OrderItemadd(ctx context.Context, in *OrderItemaddReq, opts ...grpc.CallOption) (*OrderItemaddResp, error)
	OrderItemUpdate(ctx context.Context, in *OrderItemUpdateReq, opts ...grpc.CallOption) (*OrderItemUpdateResp, error)
	OrderItemLike(ctx context.Context, in *OrderItemLikeReq, opts ...grpc.CallOption) (*OrderItemLikeResp, error)
	Shopadd(ctx context.Context, in *ShopaddReq, opts ...grpc.CallOption) (*ShopaddResp, error)
	Recordadd(ctx context.Context, in *RecordaddReq, opts ...grpc.CallOption) (*RecordaddResp, error)
	ShopList(ctx context.Context, in *ShopListReq, opts ...grpc.CallOption) (*ShopListResp, error)
	OrderItemShow(ctx context.Context, in *OrderItemShowReq, opts ...grpc.CallOption) (*OrderItemShowResp, error)
	OrderItemList(ctx context.Context, in *OrderItemListReq, opts ...grpc.CallOption) (*OrderItemListResp, error)
	OrderItemdel(ctx context.Context, in *OrderItemdelReq, opts ...grpc.CallOption) (*OrderItemdelResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, User_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OrderItemadd(ctx context.Context, in *OrderItemaddReq, opts ...grpc.CallOption) (*OrderItemaddResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItemaddResp)
	err := c.cc.Invoke(ctx, User_OrderItemadd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OrderItemUpdate(ctx context.Context, in *OrderItemUpdateReq, opts ...grpc.CallOption) (*OrderItemUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItemUpdateResp)
	err := c.cc.Invoke(ctx, User_OrderItemUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OrderItemLike(ctx context.Context, in *OrderItemLikeReq, opts ...grpc.CallOption) (*OrderItemLikeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItemLikeResp)
	err := c.cc.Invoke(ctx, User_OrderItemLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Shopadd(ctx context.Context, in *ShopaddReq, opts ...grpc.CallOption) (*ShopaddResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShopaddResp)
	err := c.cc.Invoke(ctx, User_Shopadd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Recordadd(ctx context.Context, in *RecordaddReq, opts ...grpc.CallOption) (*RecordaddResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordaddResp)
	err := c.cc.Invoke(ctx, User_Recordadd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShopList(ctx context.Context, in *ShopListReq, opts ...grpc.CallOption) (*ShopListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShopListResp)
	err := c.cc.Invoke(ctx, User_ShopList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OrderItemShow(ctx context.Context, in *OrderItemShowReq, opts ...grpc.CallOption) (*OrderItemShowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItemShowResp)
	err := c.cc.Invoke(ctx, User_OrderItemShow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OrderItemList(ctx context.Context, in *OrderItemListReq, opts ...grpc.CallOption) (*OrderItemListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItemListResp)
	err := c.cc.Invoke(ctx, User_OrderItemList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OrderItemdel(ctx context.Context, in *OrderItemdelReq, opts ...grpc.CallOption) (*OrderItemdelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItemdelResp)
	err := c.cc.Invoke(ctx, User_OrderItemdel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	OrderItemadd(context.Context, *OrderItemaddReq) (*OrderItemaddResp, error)
	OrderItemUpdate(context.Context, *OrderItemUpdateReq) (*OrderItemUpdateResp, error)
	OrderItemLike(context.Context, *OrderItemLikeReq) (*OrderItemLikeResp, error)
	Shopadd(context.Context, *ShopaddReq) (*ShopaddResp, error)
	Recordadd(context.Context, *RecordaddReq) (*RecordaddResp, error)
	ShopList(context.Context, *ShopListReq) (*ShopListResp, error)
	OrderItemShow(context.Context, *OrderItemShowReq) (*OrderItemShowResp, error)
	OrderItemList(context.Context, *OrderItemListReq) (*OrderItemListResp, error)
	OrderItemdel(context.Context, *OrderItemdelReq) (*OrderItemdelResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) OrderItemadd(context.Context, *OrderItemaddReq) (*OrderItemaddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemadd not implemented")
}
func (UnimplementedUserServer) OrderItemUpdate(context.Context, *OrderItemUpdateReq) (*OrderItemUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemUpdate not implemented")
}
func (UnimplementedUserServer) OrderItemLike(context.Context, *OrderItemLikeReq) (*OrderItemLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemLike not implemented")
}
func (UnimplementedUserServer) Shopadd(context.Context, *ShopaddReq) (*ShopaddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shopadd not implemented")
}
func (UnimplementedUserServer) Recordadd(context.Context, *RecordaddReq) (*RecordaddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recordadd not implemented")
}
func (UnimplementedUserServer) ShopList(context.Context, *ShopListReq) (*ShopListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopList not implemented")
}
func (UnimplementedUserServer) OrderItemShow(context.Context, *OrderItemShowReq) (*OrderItemShowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemShow not implemented")
}
func (UnimplementedUserServer) OrderItemList(context.Context, *OrderItemListReq) (*OrderItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemList not implemented")
}
func (UnimplementedUserServer) OrderItemdel(context.Context, *OrderItemdelReq) (*OrderItemdelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemdel not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OrderItemadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemaddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OrderItemadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OrderItemadd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OrderItemadd(ctx, req.(*OrderItemaddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OrderItemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OrderItemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OrderItemUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OrderItemUpdate(ctx, req.(*OrderItemUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OrderItemLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OrderItemLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OrderItemLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OrderItemLike(ctx, req.(*OrderItemLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Shopadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopaddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Shopadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Shopadd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Shopadd(ctx, req.(*ShopaddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Recordadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordaddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Recordadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Recordadd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Recordadd(ctx, req.(*RecordaddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ShopList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShopList(ctx, req.(*ShopListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OrderItemShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OrderItemShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OrderItemShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OrderItemShow(ctx, req.(*OrderItemShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OrderItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OrderItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OrderItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OrderItemList(ctx, req.(*OrderItemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OrderItemdel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemdelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OrderItemdel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_OrderItemdel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OrderItemdel(ctx, req.(*OrderItemdelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "OrderItemadd",
			Handler:    _User_OrderItemadd_Handler,
		},
		{
			MethodName: "OrderItemUpdate",
			Handler:    _User_OrderItemUpdate_Handler,
		},
		{
			MethodName: "OrderItemLike",
			Handler:    _User_OrderItemLike_Handler,
		},
		{
			MethodName: "Shopadd",
			Handler:    _User_Shopadd_Handler,
		},
		{
			MethodName: "Recordadd",
			Handler:    _User_Recordadd_Handler,
		},
		{
			MethodName: "ShopList",
			Handler:    _User_ShopList_Handler,
		},
		{
			MethodName: "OrderItemShow",
			Handler:    _User_OrderItemShow_Handler,
		},
		{
			MethodName: "OrderItemList",
			Handler:    _User_OrderItemList_Handler,
		},
		{
			MethodName: "OrderItemdel",
			Handler:    _User_OrderItemdel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
